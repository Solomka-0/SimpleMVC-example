<?php

namespace application\models;

use ItForFree\SimpleMVC\Config;
use ItForFree\SimpleMVC\Url;

class Article extends \ItForFree\SimpleMVC\mvc\Model
{
    /**
     * @var \Date $publicationDate Дата публикации
     */
    public $publicationDate = null;

    /**
     * @var int $categoryId Id категории
     */
    public $categoryId = null;

    /**
     * @var Category $category объект категории
     */
    public $category = null;


    /**
     * @var int $access_id id модификатора доступа
     */
    public $access_id = null;

    /**
     * @var Access $access Модификатор доступа
     */
    public $access = null;

    /**
     * @var String $title Заголовок статьи
     */
    public $title = null;

    /**
     * @var String $summary Предисловие
     */
    public $summary = null;

    /**
     * @var Subcategory $subcategory объект категории
     */
    public $subcategory = null;

    /**
     * @var String $content Текст статьи
     */
    public $content = null;

    /**
     * @var String $subcategoryId Id подкатегории
     */
    public $subcategoryId = null;

    /**
     * @var array $likes Id подкатегории
     */
    public $likes = [];

    /**
     * @var array $authors Список авторов
     */
    public $authors = [];

    public function __construct($data = null)
    {
        $data = isset($data) ? array_merge($data, Config::get('core.article.construct')) : Config::get('core.article.construct');
        parent::__construct($data);
        $this->category = Config::getObject('core.category.class')->getById($this->categoryId);
        $this->subcategory = Config::getObject('core.subcategory.class')->getById($this->subcategoryId);
        $this->access = Config::getObject('core.access.class')->getById($this->access_id);

        if (isset($this->id)) {
            // Выборка авторов статьи
            $sql = "SELECT user_id FROM $this->tableName LEFT JOIN authors a on articles.id = a.article_id WHERE id = $this->id;";

            $st = $this->pdo->prepare($sql);
            $st->execute();
            $this->authors = $st->fetchAll(mode: \PDO::FETCH_COLUMN);

            // Выборка пользователей, которым понравилась запись
            $sql = "SELECT user_id FROM $this->tableName LEFT JOIN likes l on articles.id = l.article_id WHERE id = $this->id;";

            $st = $this->pdo->prepare($sql);
            $st->execute();
            $this->likes = $st->fetchAll(mode: \PDO::FETCH_COLUMN);
            $this->likes = $this->likes[0] == null ? [] : $this->likes;
        }
    }

    /**
     * @param type $route
     * @param type $elementHTML
     */
    public function returnIfAllowed($route, $elementHTML)
    {
        if($this->isAllowed($route)) {
            echo $elementHTML;
        };
    }

    public function getListByAccess($numRows = 1000000)
    {
        return parent::getList($numRows, 'access_id >= '. $_SESSION['user']['access_id']); // TODO: Change the autogenerated stub
    }

    public function insert()
    {
        $sql = "INSERT INTO $this->tableName (publicationDate, categoryId, title, summary, content, access_id, subcategoryId) 
            VALUES (:publicationDate, :categoryId, :title, :summary, :content, :access_id, :subcategoryId)";
        $st = $this->pdo->prepare ($sql);
        $st->bindValue( ":publicationDate", $this->publicationDate, \PDO::PARAM_STMT);
        $st->bindValue( ":categoryId", $this->categoryId, \PDO::PARAM_INT );
        $st->bindValue( ":title", $this->title, \PDO::PARAM_STR );
        $st->bindValue( ":summary", $this->summary, \PDO::PARAM_STR );
        $st->bindValue( ":content", $this->content, \PDO::PARAM_STR );
        $st->bindValue( ":access_id", $this->access_id, \PDO::PARAM_INT );
        $st->bindValue( ":subcategoryId", $this->subcategoryId, \PDO::PARAM_INT );
        $st->execute();

        $this->id = $this->pdo->lastInsertId();

        $sql = "INSERT INTO authors (article_id, user_id) VALUES (:article_id, :user_id)";
        $st = $this->pdo->prepare($sql);
        foreach ($this->authors as $author) {
            $st->bindValue(":article_id", $this->id, \PDO::PARAM_INT);
            $st->bindValue(":user_id", $author, \PDO::PARAM_INT);
            $st->execute();
        }
    }

    public function update()
    {
        $sql = "UPDATE $this->tableName SET 
                 publicationDate=:publicationDate, 
                 categoryId=:categoryId, 
                 title=:title, 
                 summary=:summary,
                 content=:content,
                 access_id=:access_id, 
                 subcategoryId=:subcategoryId 
             WHERE id = :id";
        $st = $this->pdo->prepare ( $sql );

        $st->bindValue( ":publicationDate", $this->publicationDate, \PDO::PARAM_STMT);
        $st->bindValue( ":categoryId", $this->categoryId, \PDO::PARAM_INT );
        $st->bindValue( ":title", $this->title, \PDO::PARAM_STR );
        $st->bindValue( ":summary", $this->summary, \PDO::PARAM_STR );
        $st->bindValue( ":content", $this->content, \PDO::PARAM_STR );
        $st->bindValue( ":access_id", $this->access_id, \PDO::PARAM_INT );
        $st->bindValue( ":subcategoryId", $this->subcategoryId, \PDO::PARAM_INT );
        $st->bindValue( ":id", $this->id, \PDO::PARAM_INT );
        $st->execute();
    }
}